---
alwaysApply: true
---

# Zion 代码组件开发主控制器 Beta

## 🎯 核心使命

基于用户一句话需求，通过智能模式控制，自动化完成Zion组件的完整开发流程。

## 🧠 智能模式控制

### 模式识别与流程调度

#### REQUIREMENT 模式
**触发条件**：
- 用户提出新组件开发需求
- 需求描述不够详细或完整

**执行动作**：
```markdown
引用文件：@zion-requirement-refinement.mdc
**执行动作**：
立即开始执行需求完善流程的第一步，按照"一次一问"原则逐步完善需求，完成后提示用户输入 "PLAN" 生成开发计划
将收集到的账号和密码保存至账号.md，若不存在就创建
```

#### PLAN 模式  
**触发条件**：
- 用户完成需求完善流程
- 用户输入 "PLAN"
- 需要技术方案确认

**执行动作**：
```markdown
## 📋 Zion 组件开发计划

### 🎯 需求分析
[基于完善后的需求，确定组件名称和功能]
[判断是否需要绑定具体项目数据字段]

### 🏗️ 项目规划
- 项目名称: [项目名称+组件名称]
- 应用平台: [小程序/web/小程序和web]
- 组件名称: [组件名称（英文）]
- 目标功能: [功能描述]
- 数据需求: [是否需要项目数据字段]

### 🔧 技术方案
[基于需求分析确定技术实现方案]

### 📝 执行步骤
1. 验证开发环境并确保登录状态
2. 项目状态检查与初始化
3. 依赖安装检查并补充 package.json项目基础信息
4. 通过 Zion MCP 获取项目配置（根据开发需求选择性调用）
5. 开发需求解析确认
6. 文件目录生成
7. 代码开发
8. 将组件按规范导出到项目内的主入口
9. 代码合规校验
10. 代码组件打包流程执行watch:build命令
11. 生成代码组件帮助文档与resources资源
12. 代码组件首次发布
13. 结合 Zion 实时预览调试代码组件
14. 代码组件发布上线

**请输入 "ACT" 确认执行此计划**
```

#### ACT 模式
**触发条件**：
- 用户输入 "ACT" 
- 用户提出直接的操作请求

**执行动作**：
执行流程如下：
```markdown
引用文件：
- @zion-development-workflow.md (执行流程)
- @zion-code-standards.md (代码规范)
- @zion-graphql-schema-guide.md (需要时引用)

执行14步标准开发流程
```


## 🛡️ 核心约束

### 目录唯一性原则
- **智能项目检测**：开始任何操作前必须检查项目状态
- **用户友好交互**：现有项目时询问用户意愿，避免强制决策
- **唯一工作目录**：所有操作均在Zion项目目录内进行

### 规范遵循原则
- **严格遵循Zion平台组件开发规范**
- **三段式接口规范**: PropData、StateData、Event、Props
- **禁止自定义决策**: 不能擅自添加模拟数据或精简功能

## 🔄 异常处理机制

### 常见异常类型及处理
1. **环境异常**: 自动重新登录，网络重试3次
2. **项目异常**: 自动重命名，最多尝试5次
3. **代码异常**: 结合代码组件规范自动修复语法和类型错误
4. **发布异常**: 根据报错结果若提示版本重复则升级版本号，若出现其他报错进行修复

### 上下文总结
每个步骤执行后记录状态，支持断点续跑和错误恢复。

## 📋 模式切换命令

- **开始需求完善**: 直接提出组件需求
- **生成开发计划**: 输入 "PLAN"
- **执行开发流程**: 输入 "ACT" 
- **查看规范**: 自动引用相关规范文件

---

**注意**: 本文件为主控制器，负责模式识别和流程调度。具体执行逻辑请参考对应的专业文件。