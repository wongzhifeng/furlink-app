// FurLink ÂêéÁ´ØAPIÊúçÂä° - ZionÂπ≥Âè∞ÁâàÊú¨
// ÂÆ†Áâ©Á¥ßÊÄ•ÂØªÂõûÂπ≥Âè∞ÂêéÁ´ØÊúçÂä° - ZionÈÉ®ÁΩ≤‰ºòÂåñ

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import logger from './utils/logger.js';
import { 
  requestMonitoring, 
  memoryMonitoring, 
  errorMonitoring, 
  performanceReport 
} from './middleware/monitoring.js';
import { 
  securityMiddleware, 
  securityConfig 
} from './config/security.js';

// ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ - Zion‰ºòÂåñ
dotenv.config();

// ÊÄßËÉΩÁõëÊéß
const startTime = Date.now();
const requestCount = { count: 0 };
const memoryThreshold = 400; // MB

const app = express();
const PORT = process.env.PORT || 8080;

// ZionÂπ≥Âè∞ÁâπÂÆöÈÖçÁΩÆ
const ZION_CONFIG = {
  projectId: 'KrABb5Mb0qw', // Furlink-appÈ°πÁõÆID
  databaseId: 'mgm6x7a6', // Êï∞ÊçÆÂ∫ìID
  apiBaseUrl: process.env.ZION_API_BASE_URL || 'https://api.zion.com',
  apiKey: process.env.ZION_API_KEY || 'your-zion-api-key'
};

// ÂÆâÂÖ®‰∏≠Èó¥‰ª∂ - Zion‰ºòÂåñÁâàÊú¨
app.use(securityMiddleware.createHelmet()); // ÂÆâÂÖ®Â§¥
app.use(securityMiddleware.createCors()); // CORS
app.use(securityMiddleware.createRateLimit()); // ÈÄüÁéáÈôêÂà∂
app.use(securityMiddleware.validateInput); // ËæìÂÖ•È™åËØÅ
app.use(securityMiddleware.preventSQLInjection); // SQLÊ≥®ÂÖ•Èò≤Êä§
app.use(securityMiddleware.preventXSS); // XSSÈò≤Êä§
app.use(securityMiddleware.logSecurityEvents); // ÂÆâÂÖ®Êó•Âøó

// ÁõëÊéß‰∏≠Èó¥‰ª∂ - Zion‰ºòÂåñÁâàÊú¨
app.use(requestMonitoring); // ËØ∑Ê±ÇÁõëÊéß
app.use(memoryMonitoring); // ÂÜÖÂ≠òÁõëÊéß

// ËØ∑Ê±ÇËÆ°Êï∞‰∏≠Èó¥‰ª∂
app.use((req, res, next) => {
  requestCount.count++;
  req.requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  next();
});

// Zion API‰ª£ÁêÜ‰∏≠Èó¥‰ª∂
app.use('/api/zion', (req, res, next) => {
  // Ê∑ªÂä†ZionÈ°πÁõÆ‰ø°ÊÅØÂà∞ËØ∑Ê±ÇÂ§¥
  req.headers['x-zion-project-id'] = ZION_CONFIG.projectId;
  req.headers['x-zion-database-id'] = ZION_CONFIG.databaseId;
  req.headers['x-zion-api-key'] = ZION_CONFIG.apiKey;
  next();
});

// ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ - ZionÊúÄ‰Ω≥ÂÆûË∑µÁâàÊú¨
app.get('/api/health', async (req, res) => {
  try {
    const memUsage = process.memoryUsage();
    const cpuUsage = process.cpuUsage();
    const uptime = process.uptime();
    
    // Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê
    const memoryUsagePercent = Math.round((memUsage.heapUsed / 1024 / 1024) / memoryThreshold * 100);
    const isHealthy = memoryUsagePercent < 90; // ÂÜÖÂ≠ò‰ΩøÁî®‰Ωé‰∫é90%ËßÜ‰∏∫ÂÅ•Â∫∑
    
    const healthData = {
      status: isHealthy ? 'healthy' : 'unhealthy',
      timestamp: new Date().toISOString(),
      uptime: Math.floor(uptime),
      memory: {
        used: Math.round(memUsage.heapUsed / 1024 / 1024),
        total: Math.round(memUsage.heapTotal / 1024 / 1024),
        external: Math.round(memUsage.external / 1024 / 1024),
        rss: Math.round(memUsage.rss / 1024 / 1024),
        usagePercent: memoryUsagePercent
      },
      cpu: {
        user: cpuUsage.user,
        system: cpuUsage.system
      },
      performance: {
        requestCount: requestCount.count,
        avgResponseTime: uptime > 0 ? (requestCount.count / uptime).toFixed(2) : '0',
        memoryUsagePercent: memoryUsagePercent
      },
      version: '1.0.0',
      environment: process.env.NODE_ENV || 'production',
      port: PORT,
      pid: process.pid,
      nodeVersion: process.version,
      platform: process.platform,
      // ZionÁâπÂÆö‰ø°ÊÅØ
      zion: {
        projectId: ZION_CONFIG.projectId,
        databaseId: ZION_CONFIG.databaseId,
        apiBaseUrl: ZION_CONFIG.apiBaseUrl,
        status: 'connected'
      }
    };
    
    // Ê†πÊçÆÂÅ•Â∫∑Áä∂ÊÄÅËøîÂõûÁõ∏Â∫îÁöÑHTTPÁä∂ÊÄÅÁ†Å
    const statusCode = isHealthy ? 200 : 503;
    res.status(statusCode).json(healthData);
    
  } catch (error) {
    logger.error('Health check failed:', { message: error.message, stack: error.stack });
    res.status(503).json({
      status: 'unhealthy',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// ÊÄßËÉΩÊä•ÂëäÁ´ØÁÇπ - Zion‰ºòÂåñÁâàÊú¨
app.get('/api/metrics', performanceReport);

// ZionÈ°πÁõÆ‰ø°ÊÅØÁ´ØÁÇπ
app.get('/api/zion/info', (req, res) => {
  res.json({
    project: {
      id: ZION_CONFIG.projectId,
      name: 'Furlink-app',
      databaseId: ZION_CONFIG.databaseId,
      description: 'FurLink ÂÆ†Áâ©Á¥ßÊÄ•ÂØªÂõûÂπ≥Âè∞'
    },
    database: {
      tables: [
        'account', 'fz_province', 'fz_city', 'fz_district',
        'fz_audit_record', 'fz_permission_role', 'fz_account_has_permission_role'
      ],
      features: [
        'Áî®Êà∑Ë¥¶Êà∑ÁÆ°ÁêÜ',
        'Âú∞ÁêÜ‰ΩçÁΩÆÊï∞ÊçÆ',
        'ÊùÉÈôêËßíËâ≤Á≥ªÁªü',
        'ÂÆ°ËÆ°ËÆ∞ÂΩï'
      ]
    },
    api: {
      baseUrl: ZION_CONFIG.apiBaseUrl,
      endpoints: [
        '/api/health',
        '/api/metrics',
        '/api/zion/info',
        '/api/zion/data'
      ]
    },
    timestamp: new Date().toISOString()
  });
});

// ZionÊï∞ÊçÆÊü•ËØ¢Á´ØÁÇπ
app.get('/api/zion/data/:table', async (req, res) => {
  try {
    const { table } = req.params;
    const { limit = 10, offset = 0 } = req.query;
    
    // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®Zion APIËé∑ÂèñÊï∞ÊçÆ
    // ÁõÆÂâçËøîÂõûÊ®°ÊãüÊï∞ÊçÆ
    const mockData = {
      table,
      data: [],
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        total: 0
      },
      timestamp: new Date().toISOString()
    };
    
    res.json(mockData);
    
  } catch (error) {
    logger.error('Zion data query failed:', { 
      table: req.params.table, 
      error: error.message 
    });
    res.status(500).json({
      error: 'Data query failed',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Ê†πË∑ØÂæÑ - Zion‰ºòÂåñÂìçÂ∫î
app.get('/', (req, res) => {
  const responseData = {
    service: 'FurLink Backend API - Zion Platform',
    message: 'üêæ ÂÆ†Áâ©Á¥ßÊÄ•ÂØªÂõûÂπ≥Âè∞ÂêéÁ´ØÊúçÂä° - ZionÈÉ®ÁΩ≤ÁâàÊú¨',
    version: '1.0.0',
    status: 'running',
    port: PORT,
    environment: process.env.NODE_ENV || 'production',
    platform: 'Zion',
    endpoints: {
      health: '/api/health',
      metrics: '/api/metrics',
      zionInfo: '/api/zion/info',
      zionData: '/api/zion/data/:table',
      root: '/'
    },
    zion: {
      projectId: ZION_CONFIG.projectId,
      databaseId: ZION_CONFIG.databaseId,
      status: 'connected'
    },
    timestamp: new Date().toISOString(),
    requestId: req.requestId
  };
  res.status(200).json(responseData);
});

// 404Â§ÑÁêÜ - ZionÊúÄ‰Ω≥ÂÆûË∑µÁâàÊú¨
app.use('*', (req, res) => {
  logger.warn(`404 Not Found: ${req.method} ${req.originalUrl}`, { requestId: req.requestId, ip: req.ip });
  res.status(404).json({
    success: false,
    error: 'Not Found',
    message: `Ë∑ØÂæÑ ${req.originalUrl} ‰∏çÂ≠òÂú®`,
    timestamp: new Date().toISOString(),
    availableEndpoints: ['/', '/api/health', '/api/metrics', '/api/zion/info'],
    requestId: req.requestId
  });
});

// ÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂ - ZionÊúÄ‰Ω≥ÂÆûË∑µÁâàÊú¨
app.use(errorMonitoring); // ÈîôËØØÁõëÊéß
app.use((err, req, res, next) => {
  const errorData = {
    message: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    url: req.url,
    method: req.method,
    timestamp: new Date().toISOString(),
    requestId: req.requestId,
    ip: req.ip,
    zion: {
      projectId: ZION_CONFIG.projectId,
      databaseId: ZION_CONFIG.databaseId
    }
  };
  
  logger.error('API Error:', errorData);
  
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
    timestamp: new Date().toISOString(),
    requestId: req.requestId,
    error: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
});

// ÂêØÂä®ÊúçÂä°Âô® - ZionÊúÄ‰Ω≥ÂÆûË∑µÁâàÊú¨
let server;
function startServer() {
  try {
    server = app.listen(PORT, '0.0.0.0', () => {
      const startupTime = Date.now() - startTime;
      logger.info(`üöÄ FurLink Backend API Started Successfully on Zion Platform!`);
      logger.info(`üì± Port: ${PORT}`);
      logger.info(`üåê Environment: ${process.env.NODE_ENV || 'production'}`);
      logger.info(`üîó Health Check: http://0.0.0.0:${PORT}/api/health`);
      logger.info(`üìä Metrics: http://0.0.0.0:${PORT}/api/metrics`);
      logger.info(`üè¢ Zion Info: http://0.0.0.0:${PORT}/api/zion/info`);
      logger.info(`‚è∞ Started at: ${new Date().toISOString()}`);
      logger.info(`‚ö° Startup time: ${startupTime}ms`);
      logger.info(`üíæ Memory limit: ${memoryThreshold}MB`);
      logger.info(`üîß Node.js version: ${process.version}`);
      logger.info(`üñ•Ô∏è Platform: ${process.platform}`);
      logger.info(`üè¢ Zion Project ID: ${ZION_CONFIG.projectId}`);
      logger.info(`üóÑÔ∏è Database ID: ${ZION_CONFIG.databaseId}`);
    });

    // ÊúçÂä°Âô®Ë∂ÖÊó∂ÈÖçÁΩÆ - Zion‰ºòÂåñÁâàÊú¨
    server.timeout = 30000; // 30ÁßíË∂ÖÊó∂
    server.keepAliveTimeout = 65000; // ‰øùÊåÅËøûÊé•Ë∂ÖÊó∂
    server.headersTimeout = 66000; // Â§¥ÈÉ®Ë∂ÖÊó∂

  } catch (error) {
    logger.error('‚ùå Server startup failed:', { message: error.message, stack: error.stack });
    process.exit(1);
  }
}

// ‰ºòÈõÖÂÖ≥Èó≠ - ZionÊúÄ‰Ω≥ÂÆûË∑µÁâàÊú¨
let isShuttingDown = false;
let shutdownTimeout;

function gracefulShutdown(signal) {
  if (isShuttingDown) {
    logger.warn(`Received ${signal} again, already shutting down.`);
    return;
  }
  isShuttingDown = true;
  
  logger.info(`üîÑ Received ${signal}, starting graceful shutdown...`);
  
  // ËÆæÁΩÆÂº∫Âà∂ÂÖ≥Èó≠Ë∂ÖÊó∂
  shutdownTimeout = setTimeout(() => {
    logger.error('‚è∞ Graceful shutdown timeout, forcing exit');
    process.exit(1); // Âº∫Âà∂ÈÄÄÂá∫
  }, 15000); // 15ÁßíÂº∫Âà∂ÈÄÄÂá∫

  if (server) {
    server.close((err) => {
      if (err) {
        logger.error('‚ùå Error during server close:', { message: err.message, stack: err.stack });
        process.exit(1);
      }
      logger.info('‚úÖ Server closed. Exiting process.');
      clearTimeout(shutdownTimeout);
      process.exit(0);
    });
  } else {
    logger.info('No server to close. Exiting process.');
    clearTimeout(shutdownTimeout);
    process.exit(0);
  }
}

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Êú™ÊçïËé∑ÂºÇÂ∏∏Â§ÑÁêÜ - ZionÊúÄ‰Ω≥ÂÆûË∑µÁâàÊú¨
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', {
    message: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString(),
    pid: process.pid,
    memoryUsage: process.memoryUsage(),
    zion: {
      projectId: ZION_CONFIG.projectId,
      databaseId: ZION_CONFIG.databaseId
    }
  });
  // Á°Æ‰øùÊó•ÂøóÂÜôÂÖ•ÂÆåÊàê
  setTimeout(() => process.exit(1), 1000); // Âª∂ËøüÈÄÄÂá∫ÔºåÁ°Æ‰øùÊó•ÂøóËæìÂá∫
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Promise Rejection:', {
    reason: reason,
    promise: promise,
    timestamp: new Date().toISOString(),
    pid: process.pid,
    memoryUsage: process.memoryUsage(),
    zion: {
      projectId: ZION_CONFIG.projectId,
      databaseId: ZION_CONFIG.databaseId
    }
  });
  // Á°Æ‰øùÊó•ÂøóÂÜôÂÖ•ÂÆåÊàê
  setTimeout(() => process.exit(1), 1000); // Âª∂ËøüÈÄÄÂá∫ÔºåÁ°Æ‰øùÊó•ÂøóËæìÂá∫
});

// ÂêØÂä®ÊúçÂä°Âô®
startServer();

// ÂØºÂá∫ÊúçÂä°Âô®ÂÆû‰æãÁî®‰∫éÊµãËØï
export { app, server, PORT, ZION_CONFIG };
